//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Degadis.Properties {
    using System;
    
    
    /// <summary>
    ///   Clase de recurso fuertemente tipado, para buscar cadenas traducidas, etc.
    /// </summary>
    // StronglyTypedResourceBuilder generó automáticamente esta clase
    // a través de una herramienta como ResGen o Visual Studio.
    // Para agregar o quitar un miembro, edite el archivo .ResX y, a continuación, vuelva a ejecutar ResGen
    // con la opción /str o recompile su proyecto de VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Devuelve la instancia de ResourceManager almacenada en caché utilizada por esta clase.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Degadis.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Reemplaza la propiedad CurrentUICulture del subproceso actual para todas las
        ///   búsquedas de recursos mediante esta clase de recurso fuertemente tipado.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a DEGADIS proporciona tres métodos para especificar el coeficiente de transferencia de calor que describe la transferencia de calor desde la superficie del suelo a la nube contaminante: (C) la correlación integrada (DEGADIS) que se basa en correlaciones del manual para la convección forzada y natural de una placa plana, ( L) la correlación LLNL que se basa en observaciones experimentales a escala de campo para las liberaciones de GNL en el desierto, o (V) un coeficiente de transferencia de calor particular (c [resto de la cadena truncado]&quot;;.
        /// </summary>
        internal static string aCoefTranCal {
            get {
                return ResourceManager.GetString("aCoefTranCal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a La concentración de contaminante [in kg/m^3] ingresada aquí debe corresponder con la fracción molar de contaminante recién ingresada. Para una fracción molar de contaminante de cero, la concentración de contaminante también debe ser cero. Para una fracción molar de contaminante de uno, la concentración de contaminante también debe ser igual a la densidad del contaminante puro..
        /// </summary>
        internal static string aConCont {
            get {
                return ResourceManager.GetString("aConCont", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a La densidad se determina en función de la concentración mediante una lista de triples ordenados proporcionados por el usuario. Utilice el siguiente formulario:
        ///primer punto - aire puro y = 0.0, Cc = 0.0, RHOG = RHOA = kg/m^3,
        ///           .
        ///           .
        ///           .
        ///último punto - gas puro y = 1.0, Cc = RHOE, RHOG = RHOE.
        /// </summary>
        internal static string aDenCurv {
            get {
                return ResourceManager.GetString("aDenCurv", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a La densidad de la mezcla [in kg/m^3] ingresada aquí debe corresponder con la fracción molar del contaminante y la concentración del contaminante recién ingresados. Para una fracción molar de contaminante de cero, la densidad de la mezcla debe ser la densidad del aire ambiente.
        ///Para una fracción molar de contaminante de uno, la densidad de la mezcla debe ser igual a la densidad del contaminante puro..
        /// </summary>
        internal static string aDenMezcla {
            get {
                return ResourceManager.GetString("aDenMezcla", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Descripción de la fuente transitoria ...
        ///La fuente primaria se describe por la tasa de liberación de contaminantes (E [=] kg de contaminante / s), el radio (R1 [=] m), la fracción de masa del contaminante (PWC) y la temperatura de liberación (PTEMP [=] K); estos se ingresan por puntos ordenados de la siguiente manera:
        ///primer punto:
        ///      - t = 0, E (t = 0), R1 (t = 0), PWC (t = 0), PTEMP (t = 0) (valores iniciales distintos de cero)
        ///segundo punto:
        ///      - t = t1, E (t = t1), R1 (t = t1), PWC (t = t1),  [resto de la cadena truncado]&quot;;.
        /// </summary>
        internal static string aDescTrans1 {
            get {
                return ResourceManager.GetString("aDescTrans1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Descripción de la fuente transitoria ...
        ///El primario se describe mediante la tasa de evolución de la masa de la fuente (E [=] kg / s) y el radio (R1 [=] m) para una liberación transitoria que se ingresan mediante triples ordenados de la siguiente manera:
        ///primer punto - t = 0, E (t = 0), R1 (t = 0) (valores iniciales distintos de cero)
        ///segundo punto - t = t1, E (t = t1), R1 (t = t1)
        ///               .
        ///               .
        ///               .
        ///último punto distinto de cero - t = TEND, E (t = TEND), R1 (t = TEND) [resto de la cadena truncado]&quot;;.
        /// </summary>
        internal static string aDescTrans2 {
            get {
                return ResourceManager.GetString("aDescTrans2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a El diámetro de la fuente representa el área a través de la cual pasa la tasa de evolución..
        /// </summary>
        internal static string aDiamFuente {
            get {
                return ResourceManager.GetString("aDiamFuente", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Advertencia.
        /// </summary>
        internal static string advertencia {
            get {
                return ResourceManager.GetString("advertencia", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a La elevación de la fuente es la altura de liberación (m)..
        /// </summary>
        internal static string aElevFuente {
            get {
                return ResourceManager.GetString("aElevFuente", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a La tasa de evolución (liberación) en estado estacionario es la tasa de contaminación (sin aire) que se libera a la atmósfera [en kg de contaminante/s]..
        /// </summary>
        internal static string aFluEm {
            get {
                return ResourceManager.GetString("aFluEm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a La fracción de masa del contaminante de origen es la fracción de masa de los componentes no aéreos en el material liberado (en este momento). Esta fracción de masa debe especificarse para una fuente &quot;diluida&quot;..
        /// </summary>
        internal static string aFracMass {
            get {
                return ResourceManager.GetString("aFracMass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a La fracción molar del contaminante es el primer elemento de cada triple ordenado. Los triples deben comenzar con aire puro (fracción molar de contaminante = 0) y aumentar hasta el último punto con contaminante liberado puro.
        ///La fracción molar de contaminante debe ingresarse como una función que aumenta monótonamente comenzando con aire puro (es decir, fracción molar de contaminante = 0.0)..
        /// </summary>
        internal static string aFracMol {
            get {
                return ResourceManager.GetString("aFracMol", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a La fracción de masa del contaminante de origen es la fracción de masa de los componentes no aéreos en el material liberado. Esta fracción de masa debe especificarse para una fuente &quot;diluida&quot;..
        /// </summary>
        internal static string aFracMolCon {
            get {
                return ResourceManager.GetString("aFracMolCon", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Para la especificación de capacidad calorífica, se puede ingresar una capacidad calorífica dependiente de la temperatura usando la correlación codificada en DEGADIS. Si una capacidad calorífica constante es adecuada, establezca GASCPK igual a la capacidad calorífica [in J/kg/K] y GASCPP igual a cero; DEGINP volverá a calcular los valores que se utilizan en el modelo..
        /// </summary>
        internal static string aGasCPK {
            get {
                return ResourceManager.GetString("aGasCPK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a El peso molecular del contaminante se usa para convertir entre fracción de masa, fracción molar y concentración; también se puede utilizar para estimar la densidad. El peso molecular del contaminante puede ser el peso molecular de una mezcla. (Cualquier aire presente en el material liberado no debe incluirse al determinar el peso molecular del contaminante (mezcla) para el modelo. Si hay aire presente en el material liberado que no pueda atribuirse a los procesos de mezcla atmosférica modelados por DEGADIS, [resto de la cadena truncado]&quot;;.
        /// </summary>
        internal static string aGasMW {
            get {
                return ResourceManager.GetString("aGasMW", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a La densidad de liberación de contaminantes es la densidad del contaminante cuando ingresa a la atmósfera. Si la densidad de liberación de contaminantes se toma de la base de datos de propiedades del gas, se corrigió para la presión de simulación. Para una emisión &apos;isotérmica&apos;, la densidad de emisión de contaminantes se comparará con la última entrada en la especificación de densidad requerida más adelante en este programa..
        /// </summary>
        internal static string aGasRho {
            get {
                return ResourceManager.GetString("aGasRho", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a La temperatura de liberación del contaminante debe representar la temperatura del contaminante cuando ingresa a la atmósfera. Para una piscina de líquido en ebullición, la temperatura de liberación de contaminantes es el punto de ebullición normal. Para una liberación de líquido presurizado, la liberación, la temperatura de liberación de contaminantes es el punto de ebullición normal. (La temperatura de liberación debe reflejar la condición del contaminante después de la despresurización a presión atmosféri [resto de la cadena truncado]&quot;;.
        /// </summary>
        internal static string aGasTemp {
            get {
                return ResourceManager.GetString("aGasTemp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Los niveles de preocupación superior e inferior (como fracciones molares) pueden representar niveles de preocupación como el límite inferior de inflamabilidad (LFL) y LFL / 2 o el límite de exposición a corto plazo (STEL) y STEL / 2. Los niveles de preocupación superior e inferior se utilizan para calcular las isopletas que se muestran en el resultado del modelo. El nivel más bajo de preocupación (LLC) se utiliza para determinar la fracción molar más baja predeterminada de interés (yclow)..
        /// </summary>
        internal static string aGasULC {
            get {
                return ResourceManager.GetString("aGasULC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a La elevación para los cálculos de contorno (receptor) se utiliza junto con los niveles superior e inferior de interés para calcular las isopletas que se muestran en la salida del modelo..
        /// </summary>
        internal static string aGasZZc {
            get {
                return ResourceManager.GetString("aGasZZc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Una simulación isotérmica simplemente no usa el balance de energía en DEGADIS para estimar la densidad de la mezcla (a partir de la temperatura de la mezcla). Entonces, para una simulación isotérmica, el usuario debe especificar la relación entre la fracción molar del contaminante, la concentración del contaminante [kg/m^3] y la densidad de la mezcla [kg/m^3] mediante una serie de triples ordenados. Esta relación se determina normalmente antes de ejecutar DEGADIS calculando las propiedades pertinentes para  [resto de la cadena truncado]&quot;;.
        /// </summary>
        internal static string aIsotermico {
            get {
                return ResourceManager.GetString("aIsotermico", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a La especificación de una masa inicial de contaminante sobre la fuente permite al usuario modelar una liberación instantánea de material.
        ///Tenga en cuenta que esta es la masa de contaminante PURO sobre la fuente y no incluye el aire que pueda estar presente en esta masa inicial. La fracción de masa de contaminante y el radio inicial de esta masa inicial de contaminante sobre la fuente se toman de la especificación de la fuente a nivel del suelo en el tiempo cero.
        ///Especificación de cualquier contaminante pre [resto de la cadena truncado]&quot;;.
        /// </summary>
        internal static string aMasaIni {
            get {
                return ResourceManager.GetString("aMasaIni", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Para los casos &quot;isotérmicos&quot;, hay dos opciones para ingresar la relación concentración-densidad:
        ///  (1) NDEN = -1; La simulación trata al contaminante como si fuera un gas ideal con una capacidad calorífica molal constante igual a la del aire. Se ignora la condensación de agua.
        ///  (2) NDEN&gt; 0; En este caso, NDEN es el número de triples que se utilizan para especificar la concentración del contaminante y la densidad de la mezcla como funciones de la fracción molar del contaminante (basado en la mezcla adiabá [resto de la cadena truncado]&quot;;.
        /// </summary>
        internal static string aNden {
            get {
                return ResourceManager.GetString("aNden", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a ¿continuar con la opción 1?.
        /// </summary>
        internal static string aOp1 {
            get {
                return ResourceManager.GetString("aOp1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a ¿continuar con la opción 2?.
        /// </summary>
        internal static string aOp2 {
            get {
                return ResourceManager.GetString("aOp2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a El modelo puede considerar liberaciones que son &apos;puras&apos; o &apos;diluidas&apos; de la siguiente manera:
        ///Una liberación se considera pura si no hay aire en el gas o aerosol liberado. Un ejemplo de liberación pura sería una piscina de líquido hirviendo. El gas que sale de la piscina de líquido en ebullición no contiene aire procedente de la piscina. Para una liberación pura, se requerirá la tasa de liberación de contaminantes puros [kg de contaminante/s].
        ///Se considera que una liberación está diluida si hay aire en el  [resto de la cadena truncado]&quot;;.
        /// </summary>
        internal static string aPoD {
            get {
                return ResourceManager.GetString("aPoD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Las propiedades de los contaminantes pertinentes se incluyen en archivos de datos (extensión GAS). El contenido de un archivo de datos se puede editar con su editor de texto favorito. Se incluye un archivo de datos de ejemplo en EXAMPLE.GAS. Las entradas en blanco en el archivo de datos tienen por defecto las propiedades del aire con la excepción de la densidad que se calcula con la ley de los gases ideales..
        /// </summary>
        internal static string aPropCont {
            get {
                return ResourceManager.GetString("aPropCont", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a El radio de la fuente en estado estacionario (primario) representa el área a través de la cual pasa la tasa de evolución. Las fuentes primarias que no son circulares normalmente se pueden modelar como circulares con la misma área..
        /// </summary>
        internal static string aRadFuente {
            get {
                return ResourceManager.GetString("aRadFuente", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a La tasa de evolución (liberación) es la tasa de contaminación (sin aire) que se libera a la atmósfera [in kg de contaminante/s]..
        /// </summary>
        internal static string aReleaseRate {
            get {
                return ResourceManager.GetString("aReleaseRate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a En una emisión transitoria, las características de la fuente varían con el tiempo; en una liberación de estado estable, las características de la fuente no varían con el tiempo. Una liberación también se considera transitoria si las características de la fuente no varían con el tiempo, pero la duración de la fuente es limitada.
        ///Hay tres escalas de tiempo que ayudan a determinar si un lanzamiento se modela como estado estacionario o transitorio:
        ///&apos;trel&apos; es la duración de la fuente (secundaria),
        ///&apos;thaz&apos; es e [resto de la cadena truncado]&quot;;.
        /// </summary>
        internal static string aSoT {
            get {
                return ResourceManager.GetString("aSoT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a La duración de la fuente es la duración de las versiones primarias..
        /// </summary>
        internal static string aSourceDurp {
            get {
                return ResourceManager.GetString("aSourceDurp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a El radio de la fuente primaria representa el área a través de la cual pasa la tasa de evolución. Las fuentes primarias que no son circulares normalmente se pueden modelar como circulares con la misma área..
        /// </summary>
        internal static string aSourceRad {
            get {
                return ResourceManager.GetString("aSourceRad", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a La temperatura del material liberado [K] debe especificarse para una fuente &apos;diluida&apos;..
        /// </summary>
        internal static string aTempFuente {
            get {
                return ResourceManager.GetString("aTempFuente", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a La temperatura del suelo (superficie) debe reflejar las condiciones presentes durante la liberación. Si se desconoce, la temperatura de la superficie normalmente se puede aproximar a la temperatura del aire ambiente..
        /// </summary>
        internal static string aTempSup {
            get {
                return ResourceManager.GetString("aTempSup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Una fuente transitoria (primaria) debe especificarse en función del tiempo. La fuente primaria comienza en el tiempo = 0 s..
        /// </summary>
        internal static string aTimeSource {
            get {
                return ResourceManager.GetString("aTimeSource", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a La transferencia de agua se modela como un proceso de transferencia de masa desde un sustrato de agua a la nube contaminante. Esta transferencia puede ser importante cuando:
        ///(1) la nube contaminante es significativamente más fría que la superficie del agua, Y
        ///(2) el peso molecular del contaminante es menor que el del aire.
        ///La transferencia de agua se modela solo en la fuente secundaria donde sería más significativa. Se supone que el agua se transfiere a la nube de la fuente secundaria en el área fuera de [resto de la cadena truncado]&quot;;.
        /// </summary>
        internal static string aTranAgua {
            get {
                return ResourceManager.GetString("aTranAgua", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a DEGADIS tiene disposiciones para la transferencia de calor a la nube contaminante desde la superficie del suelo..
        /// </summary>
        internal static string aTransCal {
            get {
                return ResourceManager.GetString("aTransCal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a La fracción molar más baja (predeterminada) de interés se basa en el nivel más bajo de preocupación dado anteriormente. Si desea seguir las fracciones molares de contaminantes más bajas que el nivel más bajo de preocupación, establezca la fracción molar más baja de interés en consecuencia. Para las simulaciones de estado estacionario, los cálculos se interrumpen cuando la fracción molar es menor que el nivel mínimo de preocupación. Para las simulaciones transitorias, los cálculos se interrumpen cuando la fr [resto de la cadena truncado]&quot;;.
        /// </summary>
        internal static string aYclow {
            get {
                return ResourceManager.GetString("aYclow", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a El valor ingresado para la Concentración debe ser un número positivo.
        /// </summary>
        internal static string eConcp {
            get {
                return ResourceManager.GetString("eConcp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Densidad del aire corregida a.
        /// </summary>
        internal static string eDenAireCor {
            get {
                return ResourceManager.GetString("eDenAireCor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a El valor ingresado para la densidad de la mezcla debe ser un número positivo.
        /// </summary>
        internal static string eDenMezcla {
            get {
                return ResourceManager.GetString("eDenMezcla", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Debe indicar una descripción.
        /// </summary>
        internal static string eDescrip {
            get {
                return ResourceManager.GetString("eDescrip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a El valor ingresado para el diametro de la fuente debe ser un número positivo.
        /// </summary>
        internal static string eDiamFuentep {
            get {
                return ResourceManager.GetString("eDiamFuentep", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a El valor ingresado para la duración debe ser un número positivo.
        /// </summary>
        internal static string eDurFuentep {
            get {
                return ResourceManager.GetString("eDurFuentep", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a El valor ingresado para la elevacion de la fuente debe ser un número positivo.
        /// </summary>
        internal static string eElevFuentep {
            get {
                return ResourceManager.GetString("eElevFuentep", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Las dos últimas entradas para la tasa de la fuente y el radio de la fuente deben ser cero. Ha especificado uno de estos valores como distinto de cero..
        /// </summary>
        internal static string eET {
            get {
                return ResourceManager.GetString("eET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a El valor ingresado para el flujo de contaminante debe ser un número positivo.
        /// </summary>
        internal static string eFluContp {
            get {
                return ResourceManager.GetString("eFluContp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Debe indicar una fórmula.
        /// </summary>
        internal static string eFormula {
            get {
                return ResourceManager.GetString("eFormula", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a El valor ingresado para la fraccion masica de la fuente debe ser un número positivo.
        /// </summary>
        internal static string eFracMasica {
            get {
                return ResourceManager.GetString("eFracMasica", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a La fracción molar del contaminante debe ingresarse como una función que aumenta monótonamente comenzando con aire puro (es decir, fracción molar del contaminante = 0,0)..
        /// </summary>
        internal static string eFracMolCont {
            get {
                return ResourceManager.GetString("eFracMolCont", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a El valor ingresado para la fracción molar debe ser un número positivo.
        /// </summary>
        internal static string eFracMolp {
            get {
                return ResourceManager.GetString("eFracMolp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Debe ingresar la capacidad calorífica.
        /// </summary>
        internal static string eGasCPK {
            get {
                return ResourceManager.GetString("eGasCPK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a La capacidad calorífica debe ser un Nº decimal.
        /// </summary>
        internal static string eGasCPKd {
            get {
                return ResourceManager.GetString("eGasCPKd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a El valor ingresado para la capacidad calorífica debe ser un número positivo.
        /// </summary>
        internal static string eGasCPKp {
            get {
                return ResourceManager.GetString("eGasCPKp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Debe ingresar el exponente de la capacidad calorífica.
        /// </summary>
        internal static string eGasCPP {
            get {
                return ResourceManager.GetString("eGasCPP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a El exponente de la capacidad calorífica debe ser un Nº decimal.
        /// </summary>
        internal static string eGasCPPd {
            get {
                return ResourceManager.GetString("eGasCPPd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a El valor ingresado para el exponente de la capacidad calorífica debe ser un número positivo.
        /// </summary>
        internal static string eGasCPPp {
            get {
                return ResourceManager.GetString("eGasCPPp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Debe ingresar el límite inferior.
        /// </summary>
        internal static string eGasLLC {
            get {
                return ResourceManager.GetString("eGasLLC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a El límite inferior debe ser un Nº decimal.
        /// </summary>
        internal static string eGasLLCd {
            get {
                return ResourceManager.GetString("eGasLLCd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a El valor ingresado para el límite inferior debe ser un número positivo entre 0 y 1, y menor al límite inferior.
        /// </summary>
        internal static string eGasLLCp {
            get {
                return ResourceManager.GetString("eGasLLCp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Debe ingresar la densidad.
        /// </summary>
        internal static string eGasRho {
            get {
                return ResourceManager.GetString("eGasRho", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a La densidad debe ser un Nº decimal.
        /// </summary>
        internal static string eGasRhod {
            get {
                return ResourceManager.GetString("eGasRhod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a El valor ingresado para la densidad debe ser un número positivo.
        /// </summary>
        internal static string eGasRhop {
            get {
                return ResourceManager.GetString("eGasRhop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Debe ingresar la temperatura de gas.
        /// </summary>
        internal static string eGasTemp {
            get {
                return ResourceManager.GetString("eGasTemp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a La temperatura del gas debe ser un Nº decimal.
        /// </summary>
        internal static string eGasTempd {
            get {
                return ResourceManager.GetString("eGasTempd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a El valor ingresado para la temperatura del gas debe ser un número positivo.
        /// </summary>
        internal static string eGasTempp {
            get {
                return ResourceManager.GetString("eGasTempp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Debe ingresar el límite superior.
        /// </summary>
        internal static string eGasULC {
            get {
                return ResourceManager.GetString("eGasULC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a El límite superior debe ser un Nº decimal.
        /// </summary>
        internal static string eGasULCd {
            get {
                return ResourceManager.GetString("eGasULCd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a El valor ingresado para el límite superior debe ser un número positivo entre 0 y 1.
        /// </summary>
        internal static string eGasULCp {
            get {
                return ResourceManager.GetString("eGasULCp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Debe ingresar la altura de la fuente.
        /// </summary>
        internal static string eGasZZC {
            get {
                return ResourceManager.GetString("eGasZZC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a La altura de la fuente debe ser un Nº decimal.
        /// </summary>
        internal static string eGasZZCd {
            get {
                return ResourceManager.GetString("eGasZZCd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a El valor ingresado para altura de la fuente debe ser un número positivo.
        /// </summary>
        internal static string eGasZZCp {
            get {
                return ResourceManager.GetString("eGasZZCp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a El valor ingresado para la humedad debe ser un numero positivo.
        /// </summary>
        internal static string eHum {
            get {
                return ResourceManager.GetString("eHum", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Esta humedad absoluta conduce a una humedad relativa superior a 100. Esto no es posible, por lo que la humedad relativa se ha ajustado a 100 dando una humedad absoluta de.
        /// </summary>
        internal static string eHumAbs {
            get {
                return ResourceManager.GetString("eHumAbs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a El valor ingresado para la humedad relativa debe ser un numero positivo entre 0 y 100.
        /// </summary>
        internal static string eHumRel {
            get {
                return ResourceManager.GetString("eHumRel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a El límite inferior de interés debe ser menor que el límite superior de interés..
        /// </summary>
        internal static string eLimite {
            get {
                return ResourceManager.GetString("eLimite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a La especificación de la fuente debe ingresarse como una función que aumenta monótonamente comenzando en el tiempo cero..
        /// </summary>
        internal static string eLinea2 {
            get {
                return ResourceManager.GetString("eLinea2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a El valor ingresado para la longitud MO debe ser un numero.
        /// </summary>
        internal static string eLongMO {
            get {
                return ResourceManager.GetString("eLongMO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Debe ingresar el Peso Molecular.
        /// </summary>
        internal static string eMW {
            get {
                return ResourceManager.GetString("eMW", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a El Peso Molecular debe ser un Nº decimal.
        /// </summary>
        internal static string eMWd {
            get {
                return ResourceManager.GetString("eMWd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a El valor ingresado para el peso molecular debe ser un número positivo.
        /// </summary>
        internal static string eMWp {
            get {
                return ResourceManager.GetString("eMWp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a El valor ingresado para la presión ambiente debe ser un número positivo.
        /// </summary>
        internal static string ePresAmb {
            get {
                return ResourceManager.GetString("ePresAmb", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a El valor de la presion ambiente ingresado aparenta ser irreal. ¿Desea continuar?.
        /// </summary>
        internal static string ePresIrreal {
            get {
                return ResourceManager.GetString("ePresIrreal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a El valor ingresado para el radio de la fuente debe ser un número positivo.
        /// </summary>
        internal static string eRadFuentep {
            get {
                return ResourceManager.GetString("eRadFuentep", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a El valor ingresado para el flujo de contaminante debe ser un número positivo.
        /// </summary>
        internal static string eRelease {
            get {
                return ResourceManager.GetString("eRelease", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a El valor ingresado para la temperatura ambiente debe ser un numero positivo.
        /// </summary>
        internal static string eTempAmb {
            get {
                return ResourceManager.GetString("eTempAmb", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a El valor ingresado para la temperatura de la fuente debe ser un número positivo.
        /// </summary>
        internal static string eTempFuentp {
            get {
                return ResourceManager.GetString("eTempFuentp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a El valor ingresado para la tempratura de la superficie debe ser un numero positivo.
        /// </summary>
        internal static string eTempSup {
            get {
                return ResourceManager.GetString("eTempSup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a El valor ingresado para el tiempo debe ser un número positivo.
        /// </summary>
        internal static string eTiempoFuente {
            get {
                return ResourceManager.GetString("eTiempoFuente", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a El valor ingresado para el tiempo promedio debe ser un numero positivo.
        /// </summary>
        internal static string eTiemProm {
            get {
                return ResourceManager.GetString("eTiemProm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a El titulo puede contener hasta 320 caracteres.
        /// </summary>
        internal static string eTitulo {
            get {
                return ResourceManager.GetString("eTitulo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a El valor ingresado para el coeficiente de transferencia de calor debe ser un número positivo.
        /// </summary>
        internal static string eTransCal {
            get {
                return ResourceManager.GetString("eTransCal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a El valor ingresado para Vh debe ser un número positivo.
        /// </summary>
        internal static string eTransLLNL {
            get {
                return ResourceManager.GetString("eTransLLNL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a El valor ingresado para u0 debe ser un numero positivo.
        /// </summary>
        internal static string eu0 {
            get {
                return ResourceManager.GetString("eu0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a El valor de la fracción molar debe estar entre 0 y 1.
        /// </summary>
        internal static string eYclow01 {
            get {
                return ResourceManager.GetString("eYclow01", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a El valor ingresado para la menor fracción molar de interés debe ser un número positivo.
        /// </summary>
        internal static string eYclowp {
            get {
                return ResourceManager.GetString("eYclowp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a El valor ingresado para z0 debe ser un numero positivo.
        /// </summary>
        internal static string ez0 {
            get {
                return ResourceManager.GetString("ez0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a El valor ingresado para zr debe ser un numero positivo.
        /// </summary>
        internal static string eZr {
            get {
                return ResourceManager.GetString("eZr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Agregar.
        /// </summary>
        internal static string kAgregar {
            get {
                return ResourceManager.GetString("kAgregar", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Parámetros Atmosféricos.
        /// </summary>
        internal static string kAtmPar {
            get {
                return ResourceManager.GetString("kAtmPar", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Ingrese a la clase de estabilidad Pasquill: A, B, C, D, E o F.
        ///La clase de estabilidad Pasquill-Gifford se usa para estimar:
        ///1) perfil de velocidad del viento
        ///2) Longitud de Monin-Obukhov
        ///3) velocidad de fricción
        ///4) parámetros de dispersión en la dirección x.
        /// </summary>
        internal static string kAyEst {
            get {
                return ResourceManager.GetString("kAyEst", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a La humedad ambiental se puede ingresar como: Relativa o Absoluta..
        /// </summary>
        internal static string kAyHum {
            get {
                return ResourceManager.GetString("kAyHum", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a La longitud de Monin-Obukhov es una escala de longitud que cuantifica la estabilidad vertical en la atmósfera; es un parámetro utilizado en el perfil de velocidad del viento. Las estabilidades atmosféricas inestables (A, B y C) corresponden a longitudes negativas de Monin-Obukhov, mientras que las estabilidades atmosféricas estables (E y F) corresponden a longitudes positivas. La estabilidad atmosférica neutra (D) corresponde a una escala de longitud de Monin-Obukhov infinita (que se representa en DEGADIS c [resto de la cadena truncado]&quot;;.
        /// </summary>
        internal static string kAyLongMO {
            get {
                return ResourceManager.GetString("kAyLongMO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a La presión del aire ambiente debe reflejar las condiciones presentes durante el lanzamiento..
        /// </summary>
        internal static string kAyPresAm {
            get {
                return ResourceManager.GetString("kAyPresAm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a La temperatura del aire ambiente debe reflejar las condiciones presentes durante la liberación..
        /// </summary>
        internal static string kAyTempAm {
            get {
                return ResourceManager.GetString("kAyTempAm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a El tiempo promedio utilizado para estimar DELTAY (tdy) representa la escala de tiempo asociada con el meandro de la pluma lateral en el modelo. También son pertinentes otras escalas de tiempo: trel, thaz y ttrav..
        /// </summary>
        internal static string kAytProm {
            get {
                return ResourceManager.GetString("kAytProm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a La velocidad del viento (u0) debe especificarse a una altura determinada (z0); z0 se elige para que sea representativo de la profundidad de la capa contaminante y, por lo general, se considera que es de 10 m para las emisiones a nivel del suelo. La velocidad del viento se considera constante durante el lanzamiento.
        ///Para velocidades del viento inferiores a aproximadamente 2 m / s (a 10 m), algunas suposiciones utilizadas en el modelo de chorro de pluma y la fase de dispersión a favor del viento de DEGADIS p [resto de la cadena truncado]&quot;;.
        /// </summary>
        internal static string kAyu0 {
            get {
                return ResourceManager.GetString("kAyu0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Ingrese la altura donde se mide la velocidad del viento.
        /// </summary>
        internal static string kAyz0 {
            get {
                return ResourceManager.GetString("kAyz0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a La rugosidad de la superficie (junto con la estabilidad atmosférica y la longitud de Monin-Obukhov) se utiliza para determinar la velocidad de fricción y caracterizar el perfil de velocidad del viento. El perfil de velocidad del viento logarítmico asumido asume que los elementos de rugosidad de la superficie son homogéneos. El perfil asumido puede no ser razonable para elevaciones menores que la altura de los elementos de la superficie. (Por lo general, la rugosidad de la superficie se puede aproximar como  [resto de la cadena truncado]&quot;;.
        /// </summary>
        internal static string kAyzr {
            get {
                return ResourceManager.GetString("kAyzr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Buscar caso.
        /// </summary>
        internal static string KBuscCaso {
            get {
                return ResourceManager.GetString("KBuscCaso", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Constante de capacidad calorífica del contaminante [J/kg/K].
        /// </summary>
        internal static string kCapCal {
            get {
                return ResourceManager.GetString("kCapCal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Coeficiente de transferencia de calor [J/m^2/s/K].
        /// </summary>
        internal static string kCoefTransCal {
            get {
                return ResourceManager.GetString("kCoefTransCal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Concentración del contaminante [kg/m3].
        /// </summary>
        internal static string kConcCon {
            get {
                return ResourceManager.GetString("kConcCon", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Densidad de contaminantes corregida a.
        /// </summary>
        internal static string kContDenCor {
            get {
                return ResourceManager.GetString("kContDenCor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Correlación Degadis.
        /// </summary>
        internal static string kCorrDegadis {
            get {
                return ResourceManager.GetString("kCorrDegadis", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Correlación LLNL.
        /// </summary>
        internal static string kCorrLLNL {
            get {
                return ResourceManager.GetString("kCorrLLNL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Crear nuevo caso.
        /// </summary>
        internal static string kCrearCaso {
            get {
                return ResourceManager.GetString("kCrearCaso", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Curva de densidad.
        /// </summary>
        internal static string kCurva {
            get {
                return ResourceManager.GetString("kCurva", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Por defecto.
        /// </summary>
        internal static string kDefault {
            get {
                return ResourceManager.GetString("kDefault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Tiempo medio para estimar DELTAY [s].
        /// </summary>
        internal static string kDELTAY {
            get {
                return ResourceManager.GetString("kDELTAY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Densidad de la mezcla [kg/m3].
        /// </summary>
        internal static string kDensCon {
            get {
                return ResourceManager.GetString("kDensCon", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Densidad del contaminante de la emisión [kg/m3].
        /// </summary>
        internal static string kDensGas {
            get {
                return ResourceManager.GetString("kDensGas", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Descripción.
        /// </summary>
        internal static string kDescrip {
            get {
                return ResourceManager.GetString("kDescrip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Descripción de la emisión.
        /// </summary>
        internal static string kDescVer {
            get {
                return ResourceManager.GetString("kDescVer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Especificaciones de la emisión.
        /// </summary>
        internal static string kDetalle {
            get {
                return ResourceManager.GetString("kDetalle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Ingrese el diámetro de la fuente [m].
        /// </summary>
        internal static string kDiamFuente {
            get {
                return ResourceManager.GetString("kDiamFuente", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Diluido.
        /// </summary>
        internal static string kDiluido {
            get {
                return ResourceManager.GetString("kDiluido", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Duración de la fuente [s].
        /// </summary>
        internal static string kDuracionFuente {
            get {
                return ResourceManager.GetString("kDuracionFuente", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Editar Caso.
        /// </summary>
        internal static string kEditCaso {
            get {
                return ResourceManager.GetString("kEditCaso", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Ingrese la elevación de la fuente [m].
        /// </summary>
        internal static string kElevFuente {
            get {
                return ResourceManager.GetString("kElevFuente", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Elevación para salida de contorno (receptor) [m].
        /// </summary>
        internal static string kElevRec {
            get {
                return ResourceManager.GetString("kElevRec", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Eliminar.
        /// </summary>
        internal static string kEliminar {
            get {
                return ResourceManager.GetString("kEliminar", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a ¿Se puede considerar esta emisión en estado estacionario o transitoria?.
        /// </summary>
        internal static string kEoT {
            get {
                return ResourceManager.GetString("kEoT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Especificar propiedades del contaminante.
        /// </summary>
        internal static string kEspCont {
            get {
                return ResourceManager.GetString("kEspCont", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Estabilidad de Pasquill.
        /// </summary>
        internal static string kEstabilidad {
            get {
                return ResourceManager.GetString("kEstabilidad", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Estacionaria.
        /// </summary>
        internal static string kEstacionaria {
            get {
                return ResourceManager.GetString("kEstacionaria", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Emisión en estado estacionario.
        /// </summary>
        internal static string kEstEstacionario {
            get {
                return ResourceManager.GetString("kEstEstacionario", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Emisión en estado transitorio.
        /// </summary>
        internal static string kEstTrans {
            get {
                return ResourceManager.GetString("kEstTrans", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Formula gas.
        /// </summary>
        internal static string kFormula {
            get {
                return ResourceManager.GetString("kFormula", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Fracción de masa.
        /// </summary>
        internal static string kFracMas {
            get {
                return ResourceManager.GetString("kFracMas", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Fracción molar del contaminante.
        /// </summary>
        internal static string kFracMol {
            get {
                return ResourceManager.GetString("kFracMol", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Fracción molar más baja de interés.
        /// </summary>
        internal static string kFracMolBaja {
            get {
                return ResourceManager.GetString("kFracMolBaja", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Humedad ambiente absoluta [kg agua/kg aire seco].
        /// </summary>
        internal static string kHumAbs {
            get {
                return ResourceManager.GetString("kHumAbs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Humedad ambiente relativa [%].
        /// </summary>
        internal static string kHumRel {
            get {
                return ResourceManager.GetString("kHumRel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a ¿Es este un derrame de &quot;isotérmico&quot;?.
        /// </summary>
        internal static string kIsoterma {
            get {
                return ResourceManager.GetString("kIsoterma", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a JETPLUIN: ELEJET se ha aumentado a:.
        /// </summary>
        internal static string kJetPLU {
            get {
                return ResourceManager.GetString("kJetPLU", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Tasa de liberación de contaminantes [kg/s].
        /// </summary>
        internal static string kLibCont {
            get {
                return ResourceManager.GetString("kLibCont", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Lista de contaminantes disponibles.
        /// </summary>
        internal static string kListGas {
            get {
                return ResourceManager.GetString("kListGas", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Límite inferior de interés como fracción molar
        ///(LLC).
        /// </summary>
        internal static string kLLC {
            get {
                return ResourceManager.GetString("kLLC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Ingrese el valor de Vh [m/s].
        /// </summary>
        internal static string kLLNL {
            get {
                return ResourceManager.GetString("kLLNL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Ingrese la fracción de masa del contaminante de origen.
        /// </summary>
        internal static string kMasaCont {
            get {
                return ResourceManager.GetString("kMasaCont", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Masa inicial de contaminante puro sobre la fuente [kg].
        /// </summary>
        internal static string KMasaIni {
            get {
                return ResourceManager.GetString("KMasaIni", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Modelo Degadis.
        /// </summary>
        internal static string kMDeg {
            get {
                return ResourceManager.GetString("kMDeg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Modelo Jet/Plume.
        /// </summary>
        internal static string kMJet {
            get {
                return ResourceManager.GetString("kMJet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Longitud de Monin-Obukhov [m].
        /// </summary>
        internal static string kMonin {
            get {
                return ResourceManager.GetString("kMonin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a No.
        /// </summary>
        internal static string kNo {
            get {
                return ResourceManager.GetString("kNo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Nombre de archivo.
        /// </summary>
        internal static string kNomArch {
            get {
                return ResourceManager.GetString("kNomArch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Nuevo Gas.
        /// </summary>
        internal static string kNuevoGas {
            get {
                return ResourceManager.GetString("kNuevoGas", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Peso molecular del contaminante [kg/kmol].
        /// </summary>
        internal static string kPesoMol {
            get {
                return ResourceManager.GetString("kPesoMol", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a ¿Se emite el contaminante: puro o diluido con aire?.
        /// </summary>
        internal static string kPoD {
            get {
                return ResourceManager.GetString("kPoD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Potencia de la capacidad calorífica del contaminante.
        /// </summary>
        internal static string kPoteCalGas {
            get {
                return ResourceManager.GetString("kPoteCalGas", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Presión ambiente [atm].
        /// </summary>
        internal static string kPresAmb {
            get {
                return ResourceManager.GetString("kPresAmb", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Puro.
        /// </summary>
        internal static string kPuro {
            get {
                return ResourceManager.GetString("kPuro", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Ingrese el radio de la fuente [m].
        /// </summary>
        internal static string kRadFuente {
            get {
                return ResourceManager.GetString("kRadFuente", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Radio de origen [m].
        /// </summary>
        internal static string kRadOrig {
            get {
                return ResourceManager.GetString("kRadOrig", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Rugosidad superficial, zr [m].
        /// </summary>
        internal static string kRugosidad {
            get {
                return ResourceManager.GetString("kRugosidad", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Seleccionar carpeta.
        /// </summary>
        internal static string kSelCarp {
            get {
                return ResourceManager.GetString("kSelCarp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Ingresar.
        /// </summary>
        internal static string kSet {
            get {
                return ResourceManager.GetString("kSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Si.
        /// </summary>
        internal static string kSi {
            get {
                return ResourceManager.GetString("kSi", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Siguiente.
        /// </summary>
        internal static string kSiguiente {
            get {
                return ResourceManager.GetString("kSiguiente", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Sobrescribir caso.
        /// </summary>
        internal static string kSobreCaso {
            get {
                return ResourceManager.GetString("kSobreCaso", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Ingrese la velocidad de emisión [kg de contaminante/s].
        /// </summary>
        internal static string kTasaLib {
            get {
                return ResourceManager.GetString("kTasaLib", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Temperatura del aire [K].
        /// </summary>
        internal static string kTempAire {
            get {
                return ResourceManager.GetString("kTempAire", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Temperatura de liberación de contaminantes [K].
        /// </summary>
        internal static string kTempCalGas {
            get {
                return ResourceManager.GetString("kTempCalGas", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Ingrese la temperatura de la fuente [K].
        /// </summary>
        internal static string kTempFuente {
            get {
                return ResourceManager.GetString("kTempFuente", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Temperatura del suelo [K].
        /// </summary>
        internal static string kTempSuelo {
            get {
                return ResourceManager.GetString("kTempSuelo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Tiempo [s].
        /// </summary>
        internal static string kTiempo {
            get {
                return ResourceManager.GetString("kTiempo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Titulo.
        /// </summary>
        internal static string kTitulo {
            get {
                return ResourceManager.GetString("kTitulo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a ¿Debe incluirse la transferencia de calor en los cálculos?.
        /// </summary>
        internal static string kTransfCalor {
            get {
                return ResourceManager.GetString("kTransfCalor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a ¿Se incluirá la transferencia de agua en los cálculos?.
        /// </summary>
        internal static string kTransfereAgua {
            get {
                return ResourceManager.GetString("kTransfereAgua", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Transitoria.
        /// </summary>
        internal static string kTransitoria {
            get {
                return ResourceManager.GetString("kTransitoria", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Velocidad del viento, u0 [m/s].
        /// </summary>
        internal static string kU0 {
            get {
                return ResourceManager.GetString("kU0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Límite superior de interés como fracción molar
        ///(ULC).
        /// </summary>
        internal static string kULC {
            get {
                return ResourceManager.GetString("kULC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Se muestran valores por defecto.
        /// </summary>
        internal static string kValDefecto {
            get {
                return ResourceManager.GetString("kValDefecto", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Valor particular.
        /// </summary>
        internal static string kValPar {
            get {
                return ResourceManager.GetString("kValPar", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Altura de medición del viento, z0 [m].
        /// </summary>
        internal static string kZ0 {
            get {
                return ResourceManager.GetString("kZ0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Concentración de contaminantes [Kg/m^3].
        /// </summary>
        internal static string rConCont {
            get {
                return ResourceManager.GetString("rConCont", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Fracción molar contaminante.
        /// </summary>
        internal static string rContFracMol {
            get {
                return ResourceManager.GetString("rContFracMol", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Densidad de la mezcla [Kg/m^3].
        /// </summary>
        internal static string rDenMezcla {
            get {
                return ResourceManager.GetString("rDenMezcla", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Flujo [Kg/s].
        /// </summary>
        internal static string rFlujo {
            get {
                return ResourceManager.GetString("rFlujo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Fracción Molar.
        /// </summary>
        internal static string rFracMol {
            get {
                return ResourceManager.GetString("rFracMol", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Radio de la fuente [m].
        /// </summary>
        internal static string rRadio {
            get {
                return ResourceManager.GetString("rRadio", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Temperatura de la fuente [K].
        /// </summary>
        internal static string rTempFuente {
            get {
                return ResourceManager.GetString("rTempFuente", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Tiempo [s].
        /// </summary>
        internal static string rTiempo {
            get {
                return ResourceManager.GetString("rTiempo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a La integración de fuente ha devuelto IHLF = I3
        ///Este error ocurre durante la integración de las ecuaciones que describen la fuente de gas. IHLF es un código de error devuelto por el paquete de integración RKGST.
        ///Cuando IHLF = 11, fueron necesarias más de 10 bisecciones del incremento inicial de la variable independiente para realizar un paso de integración dentro del error especificado. Reducir el tamaño del paso inicial de la variable independiente (STPIN en el archivo ER1). Si esto no funciona, será nece [resto de la cadena truncado]&quot;;.
        /// </summary>
        internal static string trap01 {
            get {
                return ResourceManager.GetString("trap01", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Cuando IHLF = 12, el incremento inicial de la variable independiente (STPIN) es 0. Corrija el archivo ER1 y ejecute el programa nuevamente
        ///Cuando IHLF = 13, el incremento inicial de la variable independiente (STPIN) no es el mismo signo que la diferencia entre el límite superior del intervalo y el límite inferior del intervalo. STPIN debe ser positivo. Corrija el archivo ER1 y ejecute el programa nuevamente..
        /// </summary>
        internal static string trap011 {
            get {
                return ResourceManager.GetString("trap011", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a ALPH? ZBRENT ha fallado en JETPLU IERR: I4.
        /// </summary>
        internal static string trap02 {
            get {
                return ResourceManager.GetString("trap02", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a SZF? Falló la integración local; IHLF = &apos;, I3
        ///Este error ocurre durante la estimación de SZ sobre la fuente cuando no hay gas presente. IHLF es un código de error devuelto por el paquete de integración RKGST.
        ///Cuando IHLF = 11, fueron necesarias más de 10 bisecciones del incremento inicial de la variable independiente para realizar un paso de integración dentro del error especificado. Reduzca el tamaño del paso inicial de la variable independiente (SZSTP0 en el archivo ER1). Si esto no funciona, aumente lo [resto de la cadena truncado]&quot;;.
        /// </summary>
        internal static string trap03 {
            get {
                return ResourceManager.GetString("trap03", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Cuando IHLF = 13, el incremento inicial de la variable independiente (SZSTP0) no es el mismo signo que la diferencia entre el límite superior del intervalo y el límite inferior del intervalo. SZSTP0 debe ser positivo. Corrija el archivo ER1 y ejecute el programa nuevamente..
        /// </summary>
        internal static string trap031 {
            get {
                return ResourceManager.GetString("trap031", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Reservado.
        /// </summary>
        internal static string trap04 {
            get {
                return ResourceManager.GetString("trap04", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a CRFG? SE NECESITARON MÁS PUNTOS PARA GEN3
        ///El área COMÚN / GEN3 / almacena valores representativos de los parámetros de fuente calculados. Si aparece este mensaje, relaje los criterios de error CRFG (CRFGER) en el archivo ER1. Si este es un problema común, la longitud de los vectores / GEN3 / puede aumentarse cambiando el valor de MAXL en DEG1.PRM y recompilando y volviendo a enlazar DEGADIS..
        /// </summary>
        internal static string trap05 {
            get {
                return ResourceManager.GetString("trap05", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a TUPF? CÁLCULO DEL OBSERVADOR - ZBRENT FALLÓ: I2
        ///La búsqueda de prueba y error asociada con la búsqueda del borde contra el viento de la fuente de gas para un observador falló. A menudo, este problema se puede evitar agregando uno o dos observadores adicionales al número actual de observadores (lo que cambia las condiciones para la prueba y error). Otra posibilidad es aumentar los criterios de error para esta función (ERTUPF) en el archivo ER2..
        /// </summary>
        internal static string trap06 {
            get {
                return ResourceManager.GetString("trap06", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a TUPF? CÁLCULO DEL OBSERVADOR - ZBRENT FALLÓ:
        ///La búsqueda de prueba y error asociada con encontrar el borde a favor del viento de la fuente de gas para un observador falló. A menudo, este problema se puede evitar agregando uno o dos observadores adicionales al número actual de observadores (lo que cambia las condiciones para la prueba y error). Otra posibilidad es aumentar los criterios de error para esta función (ERTDNF) en el archivo ER2..
        /// </summary>
        internal static string trap07 {
            get {
                return ResourceManager.GetString("trap07", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a SSSUP? FALLÓ LA INTEGRACIÓN DEL OBSERVADOR, IHLF = &apos;, I3
        ///Este error ocurre durante la integración de las cinco ecuaciones diferenciales que promedian la fuente para cada observador. IHLF es un código de error devuelto por el paquete de integración RKGST.
        ///Cuando IHLF = 11, fueron necesarias más de 10 bisecciones del incremento inicial de la variable independiente para realizar un paso de integración dentro del error especificado. Reducir el tamaño del paso inicial de la variable independiente (STPO en el a [resto de la cadena truncado]&quot;;.
        /// </summary>
        internal static string trap08 {
            get {
                return ResourceManager.GetString("trap08", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Cuando IHLF = 12, el incremento inicial de la variable independiente (STPO) es 0. Corrija el archivo ER2 y ejecute el programa nuevamente.
        ///Cuando IHLF = 13, el incremento inicial de la variable independiente (STPO) no es el mismo signo que la diferencia entre el límite superior del intervalo y el límite inferior del intervalo. STPO debe ser positivo. Corrija el archivo ER2 y ejecute el programa nuevamente..
        /// </summary>
        internal static string trap081 {
            get {
                return ResourceManager.GetString("trap081", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a SSSUP / DEG2S? FALLO INTEGRACIÓN PSEUDOESTABLE, IHLF = &apos;, I3
        ///Este error ocurre durante la integración de las cuatro ecuaciones diferenciales que describen la parte del cálculo a favor del viento cuando b&gt; 0. La rutina que llama a TRAP es SSSUP si se está ejecutando una simulación transitoria; si se está ejecutando una simulación de estado estable, la rutina de llamada es DEG2S. IHLF es un código de error devuelto por el paquete de integración RKGST.
        ///Cuando IHLF = 11, fueron necesarias más de 10 biseccione [resto de la cadena truncado]&quot;;.
        /// </summary>
        internal static string trap09 {
            get {
                return ResourceManager.GetString("trap09", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Cuando IHLF = 12, el incremento inicial de la variable independiente (STPP) es 0. Corrija el archivo ER2 y ejecute el programa nuevamente.
        ///Cuando IHLF = 13, el incremento inicial de la variable independiente (STPP) no es el mismo signo que la diferencia entre el límite superior del intervalo y el límite inferior del intervalo. STPP debe ser positivo. Corrija el archivo ER2 y ejecute el programa nuevamente..
        /// </summary>
        internal static string trap091 {
            get {
                return ResourceManager.GetString("trap091", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a SSSUP / DEG2S? FALLO DE INTEGRACIÓN GAUSSIAN, IHLF = &apos;, I3
        ///Este error ocurre durante la integración de las ecuaciones diferenciales que describen la parte del cálculo a favor del viento cuando b = 0. La rutina que llama a TRAP es SSSUP si se está ejecutando una simulación transitoria; si se está ejecutando una simulación de estado estable, la rutina de llamada es DEG2S. IHLF es un código de error devuelto por el paquete de integración RKGST.
        ///Cuando IHLF = 11, fueron necesarias más de 10 bisecciones del in [resto de la cadena truncado]&quot;;.
        /// </summary>
        internal static string trap10 {
            get {
                return ResourceManager.GetString("trap10", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Cuando IHLF = 12, el incremento inicial de la variable independiente (STPG) es 0. Corrija el archivo ER2 y ejecute el programa nuevamente.
        ///Cuando IHLF = 13, el incremento inicial de la variable independiente (STPG) no es el mismo signo que la diferencia entre el límite superior del intervalo y el límite inferior del intervalo. STPG debe ser positivo. Corrija el archivo ER2 y ejecute el programa nuevamente..
        /// </summary>
        internal static string trap101 {
            get {
                return ResourceManager.GetString("trap101", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a SSSUP / DEG2S? NÚMERO TOTAL DE REGISTROS EXCEDE 120000
        ///Este es un punto de parada arbitrario para el proceso con el fin de evitar que una simulación descontrolada llene el espacio del disco. Relaja las especificaciones de salida (ODLP, ODLLP, ODLG u ODLLG) en el archivo ER2 para generar menos salida si los parámetros de entrada son válidos..
        /// </summary>
        internal static string trap11 {
            get {
                return ResourceManager.GetString("trap11", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a TPROP / ADDHEAT? Fallo de ZBRENT
        ///ZBRENT falló porque la temperatura no estaba acotada correctamente Verifique las condiciones de entrada y ejecute el programa nuevamente..
        /// </summary>
        internal static string trap17 {
            get {
                return ResourceManager.GetString("trap17", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a ALPH? FALLÓ LA INTEGRACIÓN ALFA, IHLF =
        ///La integración que determina el ajuste integral de mínimos cuadrados para ALPHA ha fallado. Tenga en cuenta que los valores pequeños de la longitud Monin-Obukhov (RML &lt;O (1 m)) en combinación con condiciones atmosféricas estables pueden causar esta falla. IHLF es un código de error devuelto por el paquete de integración RKGST.
        ///Cuando IHLF = 11, fueron necesarias más de 10 bisecciones del incremento inicial de la variable independiente para realizar un paso de integr [resto de la cadena truncado]&quot;;.
        /// </summary>
        internal static string trap18 {
            get {
                return ResourceManager.GetString("trap18", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Cuando IHLF = 12, el incremento inicial de la variable independiente (STPINZ) es 0. Corrija el archivo ER1 y ejecute el programa nuevamente.
        ///Cuando IHLF = 13, el incremento inicial de la variable independiente (STPINZ) no es el mismo signo que la diferencia entre el límite superior del intervalo y el límite inferior del intervalo. STPINZ debe ser negativo. Corrija el archivo ER1 y ejecute el programa nuevamente. Este error también ocurrirá si la rugosidad de la superficie ZR es mayor que la altura de refer [resto de la cadena truncado]&quot;;.
        /// </summary>
        internal static string trap181 {
            get {
                return ResourceManager.GetString("trap181", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a ALPH? ZBRENT no ha podido localizar ALPHA IERR:
        ///El procedimiento de búsqueda que determina ALPHA ha fallado. Este error puede ser el resultado de una especificación de velocidad inusual, como valores pequeños de la longitud Monin-Obukhov (ML &lt;O (1.m)) o alturas de referencia pequeñas (Z0 &lt;O (10. * ML)). IERR es un código de error devuelto por la rutina ZBRENT.
        ///Cuando IERR = 1, la búsqueda de ALPHA falló después de un número específico de iteraciones. Aumente el límite de error utilizado por ZBRENT (EPS en [resto de la cadena truncado]&quot;;.
        /// </summary>
        internal static string trap19 {
            get {
                return ResourceManager.GetString("trap19", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a ESTRT? EOF prematuro en RUNNAME.ER1 o RUNNAME.ER2.
        ///La parte del programa que lee archivos ER1 y ER2 encontró una marca de fin de archivo antes de que se hubiera leído toda la información. Confirme estos archivos y ejecute el programa nuevamente. Si es necesario, copie y edite el archivo EJEMPLO apropiado y ejecute el programa nuevamente..
        /// </summary>
        internal static string trap20 {
            get {
                return ResourceManager.GetString("trap20", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a ESTRT1 / ESTRT2 / ESTRT2SS / ESTRT3? DECODIFICAR falló
        ///La parte del programa que lee el archivo ER1, ER2 o ER3 no entendió una entrada numérica. Los números deben aparecer en las columnas 11 a 20 de la línea sin caracteres alfabéticos en el campo. (Tenga en cuenta que la notación exponencial no está permitida). Esta restricción no se aplica a las líneas de comentarios que tienen un signo de exclamación (!) En la primera columna..
        /// </summary>
        internal static string trap21 {
            get {
                return ResourceManager.GetString("trap21", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a ESTRT1? No se encontró el archivo de parámetros RUNNAME.ER1.
        ///No se encontró el archivo ER1 para la simulación actual (RUNNAME). Copie el archivo EXAMPLE.ER1 en RUNNAME.ER1 y edítelo según sea necesario. Ejecute el programa nuevamente..
        /// </summary>
        internal static string trap22 {
            get {
                return ResourceManager.GetString("trap22", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a SORTS1? Menos de 3 puntos ordenados para cualquier momento.
        ///Solo uno o dos puntos de simulación fueron aplicables para los tiempos de clasificación especificados. Hay cuatro posibles causas para esta condición:
        ///(1) Si este mensaje aparece cuando los tiempos de clasificación están predeterminados (CHECK5 se establece en 0. en el archivo ER3), probablemente será necesario aumentar el número de observadores para obtener una buena resolución del campo de concentración a favor del viento. (El número de observa [resto de la cadena truncado]&quot;;.
        /// </summary>
        internal static string trap23 {
            get {
                return ResourceManager.GetString("trap23", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a TPROP? Bucle de prueba y error comprometido
        ///TPROP estima la temperatura de una mezcla basándose en la composición y entalpía de la mezcla. Asegúrese de que las propiedades de las especies en difusión se ingresen correctamente y vuelva a ejecutar la simulación..
        /// </summary>
        internal static string trap24 {
            get {
                return ResourceManager.GetString("trap24", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a TPROP? Bucle de densidad isotérmica comprometido
        ///Este error nunca debería ocurrir, pero si ocurre, reconstruya el modelo a partir de los archivos originales y vuelva a ejecutar la simulación..
        /// </summary>
        internal static string trap25 {
            get {
                return ResourceManager.GetString("trap25", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Este es un diagnóstico de programación y nunca debería ocurrir.
        ///Si es así, reconstruya el modelo a partir de los archivos originales..
        /// </summary>
        internal static string trap26 {
            get {
                return ResourceManager.GetString("trap26", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a TPROP? Solicitud IGEN demasiado grande en SETDEN
        ///La subrutina SETDEN (en TPROP) realiza una serie de cálculos de mezcla adiabática con una mezcla de gas especificada y aire ambiental y coloca el resultado en la matriz DEN (5, IGEN). Este error indica que se necesitan más puntos en DEN de los que se especificaron originalmente. Aumente la asignación de DEN cambiando el valor de IGEN en DEGINP.PRM y recompilando y volviendo a vincular DEGADIS..
        /// </summary>
        internal static string trap28 {
            get {
                return ResourceManager.GetString("trap28", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a PHIF? flag IPHIFL está fuera de límites
        ///Los valores adecuados de IPHIFL son números enteros entre 1 y 5 inclusive. Aunque los valores de IPHIFL se ingresan en el archivo ER1 como números reales, deben estar en este rango. Verifique el archivo ER1 y ejecute el programa nuevamente..
        /// </summary>
        internal static string trap29 {
            get {
                return ResourceManager.GetString("trap29", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a SSSUP / DEG2S? concentración mayor que RHOE
        ///Si la concentración del contaminante es mayor que la densidad del componente puro para una simulación isotérmica, se producirá este error. Sin embargo, esta situación nunca debería ocurrir. Compruebe las condiciones de entrada y vuelva a ejecutar el programa..
        /// </summary>
        internal static string trap30 {
            get {
                return ResourceManager.GetString("trap30", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a SSSUP? concentración mayor que RHOE
        ///Si la concentración del contaminante es mayor que la densidad del componente puro para una simulación isotérmica, se producirá este error. Sin embargo, esta situación nunca debería ocurrir. Compruebe las condiciones de entrada y vuelva a ejecutar el programa..
        /// </summary>
        internal static string trap31 {
            get {
                return ResourceManager.GetString("trap31", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a PSS? Fallo de convergencia sz.
        ///Este es un diagnóstico de programación y nunca debería ocurrir. Si lo hace, verifique las condiciones de entrada y ejecute el programa nuevamente..
        /// </summary>
        internal static string trap32 {
            get {
                return ResourceManager.GetString("trap32", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a SSG? Fallo de convergencia sz.
        ///Este es un diagnóstico de programación y nunca debería ocurrir. Si es así, verifique las condiciones de entrada y ejecute el programa nuevamente..
        /// </summary>
        internal static string trap33 {
            get {
                return ResourceManager.GetString("trap33", resourceCulture);
            }
        }
    }
}
